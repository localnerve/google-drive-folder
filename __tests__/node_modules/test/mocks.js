/**
 * Mocks for the test suite.
 */

function mockDependencies(jest) {
  jest.mock('googleapis');
  jest.mock('remark');
  jest.mock('remark-html');
}

function unmockDependencies(jest) {
  jest.unmock('googleapis');
  jest.unmock('remark');
  jest.unmock('remark-html');
}

// createReadableStream mock return value readableStream
const mockReadableStream = 'readable';
const mockWriteResult = 'written';
const mockTransformResult = 'transformed';

function mockLib(jest) {
  mockDependencies(jest);

  const mockCreateReadableStream = jest.fn(
    transformResults => {
      return Promise.resolve({
        id: mockReadableStream,
        first: transformResults
      });
    }
  );
  const mockExtractTransform = jest.fn(
    () => Promise.all([Promise.resolve(mockTransformResult)])
  );
  const mockWriteToDirectory = jest.fn(
    () => Promise.all([Promise.resolve(mockWriteResult)])
  );

  jest.mock('./lib/extract-transform', () => ({
    __esModule: true,
    default: mockExtractTransform,
    extractTransform: mockExtractTransform,
    iAmAMock: () => {}
  }));
  
  jest.mock('./lib/load', () => ({
    __esModule: true,
    default: mockCreateReadableStream,
    createReadableStream: mockCreateReadableStream,
    writeToDirectory: mockWriteToDirectory,
    iAmAMock: () => {}
  }));
}

function unmockLib(jest) {
  jest.unmock('./lib/load');
  jest.unmock('./lib/extract-transform');
  unmockDependencies(jest);
}

module.exports = {
  mockReadableStream,
  mockWriteResult,
  mockTransformResult,
  mockLib,
  unmockLib
};

/**
 * Mocks for the test suite.
 */

function mockDependencies(jest) {
  jest.mock('@googleapis/drive');
}

function unmockDependencies(jest) {
  jest.unmock('@googleapis/drive');
}

// createReadableStream mock return value readableStream
const mockReadableStream = 'readable';
const mockWriteResult = 'written';
const mockTransformResult = 'transformed';
const mockStream = 'mockStream';
const emulateError = new Error('emulateError');
class MockTransform {
  push() {}
  end() {}
};

const mockExtractTransformImport = jest.fn(
  () => Promise.resolve(mockStream)
);

function mockIndex(jest) {
  mockDependencies(jest);
  jest.mock('./lib/extract-transform.js', () => ({
    __esModule: true,
    default: mockExtractTransformImport,
    extractTransform: mockExtractTransformImport,
    iAmAMock: () => {}
  }));
}

function unmockIndex(jest) {
  jest.unmock('./lib/extract-transform.js');
  unmockDependencies(jest);
}

function mockFs(jest) {
  const mockWriteFile = jest.fn((path, data) => {
    if (data.message === emulateError.message) {
      return Promise.reject(emulateError);
    }
    return Promise.resolve({
      path,
      data
    });
  });

  jest.mock('node:fs/promises', () => ({
    writeFile: mockWriteFile
  }));

  return mockWriteFile;
}

function unmockFs(jest) {
  jest.unmock('node:fs/promises');
}

function mockLoad(jest) {
  mockFs(jest);
  jest.mock('node:stream', () => ({
    Transform: MockTransform
  }));
}

function unmockLoad(jest) {
  jest.unmock('node:stream');
  unmockFs(jest);
}

const mockTestChunk = 'myspecialtestchunk';

function mockOn(name, cb) {
  if (name ==='data' && this.on.skipError) {
    cb(Buffer.from(mockTestChunk));
  } else if (name === 'end' && this.on.skipError) {
    cb();
  } else if (name === 'error' && !this.on.skipError) {
    cb(emulateError);
  }
  return this;
}

function GoogleAuth(...args) {
  if (GoogleAuth.mock) {
    GoogleAuth.mock(args);
  }
}

const defaultMockFiles = [{
  id: '101010',
  name: 'test-file.passthru'
}];

const _mockFiles = [];

function driveList () {
  return Promise.resolve({
    data: {
      get files() {
        let theFiles = _mockFiles.length > 0 ? _mockFiles : defaultMockFiles;
        if (driveList.filter) {
          theFiles = driveList.filter(theFiles);
        }
        return theFiles;
      }
    }
  });
}

const mockGoogleapis = {
  auth: {
    GoogleAuth
  },
  drive: () => ({
    files: {
      export: () => Promise.resolve({
        data: {
          on: mockOn
        }
      }),
      get: () => Promise.resolve({
        data: {
          on: mockOn
        }
      }),
      list: driveList
    }
  })
};

function mockExtractTransform(jest) {
  jest.mock('@googleapis/drive', () => mockGoogleapis);
  /*
  jest.mock('remark-html');
  jest.mock('remark', () => () => ({
    use: () => ({
      process: (inputData, cb) => {
        if (inputData.mockProcessError) {
          cb(inputData.mockProcessError);
        }
        cb(null, inputData.mockProcessResult);
      }
    })
  }));
  */
}

function unmockExtractTransform(jest) {
  jest.unmock('@googleapis/drive');
  /*
  jest.unmock('remark');
  jest.unmock('remark-html');
  */
}

function mockFiles(files, filter) {
  _mockFiles.length = 0;

  if (filter) {
    driveList.filter = filter;
  }

  Array.prototype.push.apply(_mockFiles, files);
}

function unmockFiles() {
  driveList.filter = null;
  _mockFiles.length = 0;
}

function mockAuth(fn) {
  GoogleAuth.mock = fn;
}

function unmockAuth() {
  GoogleAuth.mock = null;
}

module.exports = {
  mockReadableStream,
  mockWriteResult,
  mockTransformResult,
  mockStream,
  mockIndex,
  unmockIndex,
  mockLoad,
  unmockLoad,
  emulateError,
  mockTestChunk,
  mockOn,
  mockGoogleapis,
  mockFs,
  unmockFs,
  mockFiles,
  unmockFiles,
  mockAuth,
  unmockAuth,
  mockExtractTransform,
  unmockExtractTransform
};
